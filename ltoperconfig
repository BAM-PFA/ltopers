#!/bin/bash
# ltoperconfig
# set up variables
CONFIG="Y"
CONFIG_VERSION="1.0"
SCRIPTDIR=$(dirname "$0")
CONFIG_FILE="${SCRIPTDIR}/ltoper.conf"

# local variables
REQUIRED_VARIABLES=("FILEMAKER_USER" "FILEMAKER_PASS" "FILEMAKER_DB" "FILEMAKER_XML_URL")

get_iso8601(){
    date +%FT%T
}

maketemp(){
    mktemp -q "/tmp/$(basename $0).XXXXXX"
    if [ ${?} -ne 0 ]; then
        echo "${0}: Can't create temp file, exiting..."
        exit 1
    fi
}

report(){
        local RED="$(tput setaf 1)"   # Red      - For Warnings
        local GREEN="$(tput setaf 2)" # Green    - For Declarations
        local BLUE="$(tput setaf 4)"  # Blue     - For Questions
        local NC="$(tput sgr0)"       # No Color
        local color=""
        local startmessage=""
        local endmessage=""
        local echoopt=""
        OPTIND=1
        while getopts ":qdwstn" opt; do
            case "$opt" in
                q) color="$BLUE" ;;                         # question mode, use color blue
                d) color="$GREEN" ;;                        # declaration mode, use color green
                w) color="$RED" ; log="Y";;                 # warning mode, use color red
                s) startmessage+=([$(basename $0)] ) ;;     # prepend scriptname to the message
                t) startmessage+=($(get_iso8601) '- ' ) ;;     # prepend timestamp to the message
                n) echoopt="-n" ;;                          # to avoid line breaks after echo
            esac
        done
        shift $(( ${OPTIND} - 1 ))
        message="$1"
        echo $echoopt "${color}${startmessage[@]}${message}${NC}"
        [ "$log" = "Y" ] && _log -w "$message"
}

config_edit(){
    [ -z "$1" -o -z "$2" ] && { report -w "The config_edit function requires two arguments. Error." ; exit ;};
    sedtemp=$(maketemp)
    sed "s:^$1=[^ ]*:$1=$2:" "$CONFIG_FILE" > "$sedtemp"
    cp "$sedtemp" "$CONFIG_FILE"
}

test_config(){
    for directoryvariable in OUTDIR_INGESTFILE OUTDIR_INGESTXDCAM OUTDIR_PAPER AIP_STORAGE PODCASTDELIVER YOUTUBEDELIVER TMPDIR CUSTOM_LOG_DIR LTO_INDEX_DIR ; do
        if [ -d "${!directoryvariable}" ] ; then
            report -d "${directoryvariable} is a valid directory"
        else
            report -w "${directoryvariable} is NOT a valid directory"
        fi
    done
}

add_key(){
    key_to_add="$1"
    grep -q "^$key_to_add=" "$CONFIG_FILE" ; grep_code="$?"
    if [[ ! "${grep_code}" -eq "0" ]] ; then
        report -td "Adding NEW variable $key_to_add to $CONFIG_FILE"
        echo "$key_to_add=" >> "$CONFIG_FILE"
    fi
}

# set up configuration file if required
if [[ ! -f "$CONFIG_FILE" ]] ; then
    echo "# $(basename $CONFIG_FILE)" > "$CONFIG_FILE"
    echo "# This configuration file contains variables used throughout $WHAT_IS_THIS." >> "$CONFIG_FILE"
    echo "# Edit the lines below to form KEY=VALUE. Please do not add or remove the existing KEYs. Do not edit CONFIG_FILE_VERSION. Warning this stores a filemaker password in plain text, patches welcome." >> "$CONFIG_FILE"
    echo "CONFIG_FILE_VERSION=$CONFIG_VERSION" >> "$CONFIG_FILE"
fi
for KEY in "${REQUIRED_VARIABLES[@]}" ; do
    add_key "$KEY"
done

report -d "Table of existing variables:"
for KEY in "${REQUIRED_VARIABLES[@]}" ; do
    VALUE=$(grep "^$KEY=" "$CONFIG_FILE" | cut -d= -f2)
    printf '\t%-40s %-40s\n' "$KEY" "$VALUE"
done
while true ; do
    EDITOPTION="Edit config file in nano"
    report -q "Edit a variable? "
    PS3="Selection (enter by number)? "
    select CONFIG_KEY in "$EDITOPTION" "${REQUIRED_VARIABLES[@]}" "Quit"
    do
        break
    done
    [ "$CONFIG_KEY" = "Quit" ] && { echo Goodbye. ; exit 1 ;};
    [ "$CONFIG_KEY" = "$EDITOPTION" ] && { nano "$CONFIG_FILE" ; exit 1 ;};
    echo -n "Enter the value for $CONFIG_KEY: "
    read "CONFIG_VALUE"
    echo "$CONFIG_KEY is now set to $CONFIG_VALUE"
    config_edit "$CONFIG_KEY" "$CONFIG_VALUE"
done
