#!/bin/bash
# mountlto

SCRIPTDIR=$(dirname "${0}")
. "${SCRIPTDIR}/ltofunctions" || { echo "Missing '${SCRIPTDIR}/ltofunctions'. Exiting." ; exit 1 ;};


unset ${LTO_ARRAY}
unset ${LTFS_OPTIONS}
LTOLOGS="$HOME/Documents/lto_indexes"
if [[ -z ${LTO_ARRAY} ]] ; then
    if [[ $(uname -s) == "Darwin" ]] ; then
        LTO_ARRAY=($(system_profiler SPSASDataType | grep "SCSI Target Identifier" | cut -d : -f2 | xargs)) # try to figure out how many lto decks are attached
    else
        LTO_ARRAY=(0) # to do: itemize when there are multiple lto drives in Linux
    fi
fi

RED="$(tput setaf 1)"   # Red      - For Warnings
GREEN="$(tput setaf 2)" # Green    - For Declarations
BLUE="$(tput setaf 4)"  # Blue     - For Questions
NC="$(tput sgr0)"       # No Color

[ ! -d "$LTOLOGS" ] && mkdir -p "$LTOLOGS"
if [[ "${#LTO_ARRAY[@]}" -gt 1 ]] ; then
    PS3="${BLUE}Which LTO deck?${NC} "
    eval set "${LTO_ARRAY[@]}"
    select deck in "$@"
    do
        break
    done
    if [ ! $deck ] ; then
        echo "${RED}Error, you selected an invalid deck.${NC}"
        exit 1
    fi
else
    deck=0
fi
deckfile="$LTOLOGS/${deck}_last_used.txt"
touch "$deckfile"
printf "${BLUE}Enter the 6 character tape number:${NC} "
read TAPE_SERIAL
if [[ ! $(echo "$TAPE_SERIAL" | grep -E  "^[A-Z0-9]{6}$") ]] ; then
    echo "${RED}ERROR The tape id must contain exactly 6 capital letters and/or numbers.${NC}"
    exit 1
fi
if [[ $(uname -s) == "Darwin" ]] ; then
    mountdir="/Volumes/${TAPE_SERIAL}"
else
    mountdir="/mnt/${TAPE_SERIAL}"
fi
echo "${GREEN}MOUNTING TAPE : THE TAPE WILL MOUNT TO THE ${RED}${mountdir}${GREEN} FOLDER${NC}"
echo "${GREEN}MOUNTING TAPE : AFTER MOUNT PRESS ${RED}CONTROL-C${GREEN} TO EJECT${NC}"
trap _cleanup SIGHUP SIGINT SIGTERM
if [ $(which ltfs_ldun) ] ; then
    ltfs_ldun load $deck
fi
mkdir -p "${mountdir}"
#_version_schema

LTFS_OPTIONS+=(-o eject)
LTFS_OPTIONS+=(-o capture_index)
LTFS_OPTIONS+=(-o devname=$deck)
LTFS_OPTIONS+=(-o volname="$TAPE_SERIAL")
LTFS_OPTIONS+=(-o uid=$(id -u))
LTFS_OPTIONS+=(-o sync_type=unmount)

ltfs -f -o work_directory="$LTOLOGS" ${LTFS_OPTIONS[@]} "${mountdir}"
[ -d "${mountdir}" ] && rmdir "${mountdir}"
