# assign variables

SCRIPTNAME=$(basename "${0}")
SCRIPTDIR=$(dirname "${0}")
CONFIG_FILE="${SCRIPTDIR}/ltoper.conf"
WHAT_IS_THIS="ltoper"

# load configuration file
if [ -f "${CONFIG_FILE}" ] ; then
    . "${CONFIG_FILE}"
elif [ ! "${CONFIG}" = "Y" -a "${REQUIRECONFIG}" = "Y" ] ; then
    echo "The configuration file is not set. You amust first create ${CONFIG_FILE} by running ltoperconfig." 1>&2
    exit 1
fi

_maketemp(){
    mktemp -q "/tmp/$(basename $0).XXXXXX"
    if [ ${?} -ne 0 ]; then
        echo "${0}: Can't create temp file, exiting..."
        exit 1
    fi
}

_get_iso8601(){
    date +%FT%T
}

_report(){
        local RED="$(tput setaf 1)"   # Red      - For Warnings
        local GREEN="$(tput setaf 2)" # Green    - For Declarations
        local BLUE="$(tput setaf 4)"  # Blue     - For Questions
        local NC="$(tput sgr0)"       # No Color
        local color=""
        local startmessage=""
        local endmessage=""
        local echoopt=""
        OPTIND=1
        while getopts ":qdwstn" opt; do
            case "$opt" in
                q) color="$BLUE" ;;                         # question mode, use color blue
                d) color="$GREEN" ;;                        # declaration mode, use color green
                w) color="$RED" ; log="Y";;                 # warning mode, use color red
                s) startmessage+=([$(basename $0)] ) ;;     # prepend scriptname to the message
                t) startmessage+=($(_get_iso8601) '- ' ) ;;     # prepend timestamp to the message
                n) echoopt="-n" ;;                          # to avoid line breaks after echo
            esac
        done
        shift $(( ${OPTIND} - 1 ))
        message="$1"
        echo $echoopt "${color}${startmessage[@]}${message}${NC}"
        [ "$log" = "Y" ] && _log -w "$message"
}

_config_edit(){
    [ -z "$1" -o -z "$2" ] && { _report -w "The config_edit function requires two arguments. Error." ; exit ;};
    sedtemp=$(_maketemp)
    sed "s:^$1=[^ ]*:$1=$2:" "$CONFIG_FILE" > "$sedtemp"
    cp "$sedtemp" "$CONFIG_FILE"
}

_test_config(){
    for directoryvariable in OUTDIR_INGESTFILE OUTDIR_INGESTXDCAM OUTDIR_PAPER AIP_STORAGE PODCASTDELIVER YOUTUBEDELIVER TMPDIR CUSTOM_LOG_DIR LTO_INDEX_DIR ; do
        if [ -d "${!directoryvariable}" ] ; then
            _report -d "${directoryvariable} is a valid directory"
        else
            _report -w "${directoryvariable} is NOT a valid directory"
        fi
    done
}

_add_key(){
    key_to_add="$1"
    grep -q "^$key_to_add=" "$CONFIG_FILE" ; grep_code="$?"
    if [[ ! "${grep_code}" -eq "0" ]] ; then
        _report -td "Adding NEW variable $key_to_add to $CONFIG_FILE"
        echo "$key_to_add=" >> "$CONFIG_FILE"
    fi
}

_cleanup(){
    if [ -d "${mountdir}" ] ; then
        echo calling umount
        umount "${mountdir}"
        rmdir "${mountdir}"
    fi
}

_version_schema(){
    schemafile="$LTOLOGS/${TAPE_SERIAL}.schema"
    if [ -f "${schemafile}" ] ; then
        echo "${GREEN}Creating a new version of the ltfs schema file.${NC}"
        LASTSCHEMA="${schemafile%.*}_$(stat -t '%Y%m%d-%H%M%S' -l "${schemafile}" | awk '{print $6}').schema"
        mv -v "${schemafile}" "${LASTSCHEMA}"
        echo "${GREEN}$(basename ${0}): schema file is versioned - ${schemafile} -> ${LASTSCHEMA}.${NC}"
    fi
}

_checkdir(){
if [[ ! -d "${1}" ]] ; then
    echo "${1}" is not a directory.
    usage
    exit 1
fi
}

_pashua_run() {
    # Wrapper function for interfacing to Pashua. Written by Carsten
    # Bluem <carsten@bluem.net> in 10/2003, modified in 12/2003 (including
    # a code snippet contributed by Tor Sigurdsson), 08/2004 and 12/2004.
    # Write config file

    # Find Pashua binary. We do search both . and dirname "$0"
    # , as in a doubleclickable application, cwd is /
    # BTW, all these quotes below are necessary to handle paths
    # containing spaces.
    bundlepath="Pashua.app/Contents/MacOS/Pashua"
    mypath=`dirname "$0"`
    for searchpath in "$mypath/Pashua" "$mypath/$bundlepath" "./$bundlepath" \
                      "/Applications/$bundlepath" "$HOME/Applications/$bundlepath"
    do
        if [ -f "$searchpath" -a -x "$searchpath" ]
        then
            pashuapath=$searchpath
            break
        fi
    done
    if [ ! "$pashuapath" ] ; then
        echo "Error: Pashua is used to edit but is not found."
        if [[ "${pashuainstall}" == "" ]] ; then
            echo "Attempting to run: brew cask install pashua"
            if [[ "${pashuainstall}" != "Y" ]] ; then
                brew cask install pashua
                pashuainstall="Y"
                _pashua_run
            else
                break 2
            fi
        fi
    else
        encoding=""
        
        # Get result
        result=`"$pashuapath" $encoding $pashua_configfile | sed 's/ /;;;/g'`

        # Parse result
        for line in $result
        do
            key=`echo $line | sed 's/^\([^=]*\)=.*$/\1/'`
            value=`echo $line | sed 's/^[^=]*=\(.*\)$/\1/' | sed 's/;;;/ /g'`        
            varname=$key
            varvalue="$value"
            eval $varname='$varvalue'
        done
    fi
} # pashua_run()
