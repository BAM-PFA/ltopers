#!/usr/bin/env bash
# writelto
# writelto writes the contents of a specified directory onto a mounted LTFS-formated LTO tape.
HIDDEN_FILES=""
TAPE_MOUNT_POINT="/Volumes"
TAPE_SERIAL_REGEX="[A-Z0-9]\{6\}"
LTO_LOGS="$HOME/Documents/lto_indexes"
SCRIPTDIR=$(dirname "${0}")
TAPE_EJECT="Y"

_usage(){
    echo "writelto"
    echo "Usage:"
    echo "    -t tape serial"
    echo "    -e [ N|Y ] (state yes or no to ejecting the tape after write, default is yes)"
    echo "    -v reads back and creates checksums for the contents of a tape, and writes checksums to a file named with the tape name and date, located in the LTO logs directory."
    exit 1
}

. "${SCRIPTDIR}/mmfunctions" || { echo "Missing '${SCRIPTDIR}/mmfunctions'. Exiting." ; exit 1 ;};

# command-line options
OPTIND=1
while getopts ":t:e:v" opt ; do
    case "${opt}" in
        t) TAPE_SERIAL="${OPTARG}" ;;
        e) TAPE_EJECT="${OPTARG}" ;;
        v) VERIFY="Y" ;;
        *) echo "bad option -${OPTARG}" ; _usage ;;
        :) echo "Option -${OPTARG} requires an argument" ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

SOURCE_DIR="${1}"
if [[ ! $(echo "${TAPE_SERIAL}" | grep "${TAPE_SERIAL_REGEX}") ]] ; then
    echo "${TAPE_SERIAL} is not valid. The tape id must be exactly 6 capital letters and/or numbers."
    _usage
fi

TAPE_PATH="${TAPE_MOUNT_POINT}/${TAPE_SERIAL}"

_checkdir "${SOURCE_DIR}"
# remove .DS_Store files
find "${SOURCE_DIR}/" -name '.DS_Store' -type f -delete

_checkdir "${TAPE_PATH}"

gcp --preserve=mode,timestamps -nRv "${SOURCE_DIR}/"* "${TAPE_PATH}"

_run_critical_event "${SCRIPTDIR}/migratefiles" -o "${TAPE_PATH}" "${SOURCE_DIR}/"
RSYNC_ERR_1="$?"
HIDDEN_FILES=$(find "${TAPE_PATH}" -name ".*")
if [[ "${HIDDEN_FILES}" ]] ; then
    echo "Removing hidden files from tape."
    find "${TAPE_PATH}" -name ".*" -delete
    "${SCRIPTDIR}/migratefiles" -o "${TAPE_PATH}" "${SOURCE_DIR}/"
    RSYNC_ERR_2="$?"
fi

echo "rsync exited with ${RSYNC_ERR_1} on the first pass and ${RSYNC_ERR_2} on the second pass."
echo "rsync exited with ${RSYNC_ERR_1} on the first pass and ${RSYNC_ERR_2} on the second pass." >> "${HOME}/Documents/${TAPE_SERIAL}_writelto.txt"

_report_to_db
if [[ "${VERIFY}" = "Y" ]] ; then
    VERIFYTIME=$(_get_iso8601_c)
    READBACKDIR="${LTO_LOGS}/readback_checksums"
    _mkdir2  "${READBACKDIR}"
    find "${TAPE_PATH}" -type f ! -name .DS_Store -exec md5deep -rel "{}" >> "${READBACKDIR}/${TAPE_SERIAL}_ReadBack_checksum_${VERIFYTIME}.md5" \;
    db_fixity=$(cat "${READBACKDIR}/${TAPE_SERIAL}_ReadBack_checksum_${VERIFYTIME}.md5")
    if [ -z "$db_fixity" ] ; then
        event_outcome="No fixity information"
    fi
fi

echo -n "$(date +%FT%T) " >> "${LTO_LOGS}/tape_capacity.txt"
echo $(df -Ph "${TAPE_PATH}" | tail -n 1) >> "${LTO_LOGS}/tape_capacity.txt"

case "${TAPE_EJECT}" in
    y|Y) umount "${TAPE_PATH}" ;;
    *) echo "Done writing but not ejecting ${TAPE_SERIAL}." ;;
esac

renameschemas -u

SCHEMA_FILE="$LTO_LOGS/${TAPE_SERIAL}.schema"
if [[ -n "${FILEMAKER_XML_URL}" ]] ; then
    "${SCRIPTDIR}/lto2filemaker" "${SCHEMA_FILE}"
fi

_eventoutcome_update
if [[ "${VERIFY}" = "Y" ]] ; then
    _report_fixity_db
fi

